<?php

/**
 * Implements hook_menu()
 */
function asidebox_menu() {
	$menu['admin/config/asidebox'] = array(
		'title' => 'Aside (Feature) Box',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('asidebox_admin_settings_form'),
		'access arguments' => array('administer site configuration'),
		'file' => 'asidebox.admin.inc',
		'type' => MENU_NORMAL_ITEM,
	);
	$menu['sandbox/block_autocomplete'] = array(
		'title' => 'Block autocomplete',
		'page callback' => 'asidebox_block_autocomplete',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	return $menu;
}

/**
 * Implements hook_theme()
 */
function asidebox_theme() {
	$theme['asidebox'] = array(
		'variables' => array('body' => NULL, 'block' => NULL),
		'template' => 'asidebox',
	);
	return $theme;
}

/**
 * return a list of blocks that match the criteria
 * represented by 'string'
 * -- match the block 'info' at the beginning of the string
 */
function asidebox_block_autocomplete($string = '') {
	global $theme_key;
	$result = db_query('SELECT DISTINCT b.* FROM {block} b WHERE region <> -1 and theme = :theme_key', array(':theme_key' => $theme_key));

	$blocks = array();
	$data = array();
	foreach ($result as $block) {
		if (!isset($data[$block->module])) {
			$data[$block->module] = module_invoke($block->module, 'block_info');
		}
		$block_title = $data[$block->module][$block->delta]['info'];
		$pattern = '/^' . $string . '/';
		if (preg_match($pattern, $block_title) == 1) {
			# key is pipe-delimited string
			# bid|module|delta
			$key = sprintf('%s|%s|%s', $block->bid, $block->module, $block->delta);
			$blocks[$key] = $block_title;
			//$blocks[$block_title . "|{$block->bid}"] = $block_title;
		}
	}

	drupal_json_output($blocks);
}

/**
 * Implements hook_form_alter()
 */
function asidebox_form_alter(&$form, &$form_state, $form_id) {
	#if (isset($form_state['node'])) {
	#	 dpm($form_state['node']);
	#}
	// we should have a list of node types that support this 
	// feature (admin form)

	// what are the supported node types?
	$types = variable_get('asidebox_node_types', array('page'));
	$node_type = str_replace('_node_form', '', $form_id);
	
	// but for now, practice altering the form
	if (in_array($node_type, $types)) {
		
		$asidebox = NULL;
		$block_info = NULL;
		if (isset($form_state['node']->vid)) {
			$vid = $form_state['node']->vid;
			$asidebox = asidebox_load_asidebox($vid);
		}
		if ($asidebox == NULL) {
			$asidebox = asidebox_new_asidebox();
			$form_state['asidebox'] = NULL;
		} else {
			if ($asidebox->status == 'block') {
				$block = block_load($asidebox->block_module, $asidebox->block_delta);
				$block_info = module_invoke($block->module, 'block_info');
				dpm($block_info);
			}
			$form_state['asidebox'] = $asidebox;
		}
		
		$form['asidebox'] = array(
			'#type' => 'fieldset',
			'#title' => t('Aside (Feature) Box'),
			'#collapsible' => TRUE,
			'#collapsed' => TRUE,
			'#weight' => -10,
			'#attributes' => array('class' => array('asidebox-field')),
			'#group' => 'additional_settings',
			'#attached' => array(
				'js' => array(
					'vertical-tabs' => drupal_get_path('module', 'asidebox') . '/asidebox.js',
				),
			),
		);
		$form['asidebox']['asidebox_status'] = array(
			'#type' => 'select',
			'#title' => t('Aside Box Status'),
			'#required' => TRUE,
			'#default_value' => $asidebox->status,
			'#options' => array(
				'disabled' => t('Disabled'),
				'block' => t('Use Block'),
				'html' => t('HTML Content'),
			),
			'#attributes' => array('id' => 'asidebox-status'),
			'#description' => t('Disable the aside box, or specify the type of content.'),
			'#weight' => 0,
			'#size' => 1,
		);
		$form['asidebox']['asidebox_block_title'] = array(
			'#type' => 'textfield',
			'#title' => t('Block Title'),
			'#default_value' => !empty($block_info) ? $block_info[$asidebox->block_delta]['info'] : '',
			'#attributes' => array('class' => array('asideboxBlockTitle')),
			'#autocomplete_path' => 'sandbox/block_autocomplete',
			'#description' => t('Enter the first few letters of the <em>block description</em> to trigger the autocomplete search.'),

			'#states' => array(
				'visible' => array(
					':input[name="asidebox_status"]' => array('value' => 'block'),
				),
			),
			'#attached' => array(
				'js' => array(
					drupal_get_path('module', 'asidebox') . '/asidebox-block-field.js' => array('type' => 'file'),
				),
			),
		);
		$form['asidebox']['asidebox_bid'] = array(
			'#type' => 'hidden',
			'#default_value' => !empty($block_info) ? $asidebox->bid : '',
			'#attributes' => array('id' => 'asideboxBlockID'),
		);
		$form['asidebox']['asidebox_block_delta'] = array(
			'#type' => 'hidden',
			'#default_value' => !empty($block_info) ? $asidebox->block_delta : '',
			'#attributes' => array('id' => 'asideboxBlockDelta'),
		);
		$form['asidebox']['asidebox_block_module'] = array(
			'#type' => 'hidden',
			'#default_value' => !empty($block_info) ? $asidebox->block_module : '',
			'#attributes' => array('id' => 'asideboxBlockModule'),
		);
		$form['asidebox']['html_content'] = array(
			'#type' => 'text_format',
			'#title' => t('Enter Feature Box Content'),
			'#rows' => '10',
			'#default_value' => $asidebox->body_value,
			'#states' => array(
				'visible' => array(
					':input[name="asidebox_status"]' => array('value' => 'html'),
				),
			),
		);
		$form['#submit'][] = 'asidebox_form_submit_handler';
	}
}

/**
 * Sumbit handler to process the 'asidebox' data entered 
 * by the end user.
 */
function asidebox_form_submit_handler($form, $form_state) {
	
	$nid = $form_state['values']['nid'];
	$vid = $form_state['values']['vid'];
	
	if ($form_state['asidebox']) {
		$record = $form_state['asidebox'];
	} else {
		$record = new stdClass();
		$record->nid = $nid;
		$record->vid = $vid;
	}
	$asidebox_status = $form_state['values']['asidebox_status'];
	
	$record->status = $asidebox_status;
	
	if ($asidebox_status == 'html') {
		$record->body_value = $form_state['values']['html_content']['value'];
		$record->body_format = $form_state['values']['html_content']['format'];

	} else if ($asidebox_status == 'block') {
		$record->bid = $form_state['values']['asidebox_bid'];
		$record->block_module = $form_state['values']['asidebox_block_module'];
		$record->block_delta = $form_state['values']['asidebox_block_delta'];
	}
	// TODO add support for menus(?)
	
	if ($form_state['asidebox']) {
		drupal_write_record('asidebox', $record, 'vid');
		$form_state['node']->asidebox->is_new = FALSE;
	} else {
		// either hook_node_insert or hook_node_update will catch this case
		$form_state['node']->asidebox = $record;
		$form_state['node']->asidebox->is_new = isset($form_state['asidebox']) ? FALSE : TRUE;
	}
}

/**
 * Implements hook_node_load($node)
 */
function asidebox_node_load($nodes, $types) {
	// what are the supported node types?
	$types_we_want = variable_get('asidebox_node_types', array('page'));
	if (count(array_intersect($types_we_want, $types))) {
		foreach ($nodes as $node) {
			$node->asidebox = asidebox_load_asidebox($node->vid);
		}
	}
}

/**
 * Implements hook_node_insert($node)
 */
function asidebox_node_insert($node) {
	if (isset($node->asidebox)) {
		if ($node->asidebox->is_new) {
			$node->asidebox->vid = $node->vid;
			$node->asidebox->nid = $node->nid;
			drupal_write_record('asidebox', $node->asidebox);
		}
	}
}

/**
 * Implements hook_node_update($node)
 */
function asidebox_node_update($node) {
	// in the event the user is adding an asidebox
	// to an existing node (page, etc)
	if (isset($node->asidebox)) {
		if ($node->asidebox->is_new) {
			$node->asidebox->vid = $node->vid;
			$node->asidebox->nid = $node->nid;
			drupal_write_record('asidebox', $node->asidebox);
		}
	}
}

/**
 * Implements hook_node_delete()
 * ..to remove the record in {asidebox} that is related to this node
 */
function asidebox_node_delete($node) {
	$vid = $node->vid;
	$num_deleted = db_delete('asidebox')
		->condition('vid', $vid)
		->execute();
}

function asidebox_load_asidebox($vid) {
	// for simple queries, db_query is faster than db_select
	// http://drupal.org/node/1881146#comment-6907576
	$result = db_query('SELECT ab.* from {asidebox} ab WHERE vid = :vid', array(':vid' => $vid));
	return $result->fetchObject();
}

function asidebox_new_asidebox() {
	$o = new stdClass();
	$o->nid = NULL;
	$o->vid = NULL;
	$o->status = 'disabled';
	$o->body_value = '';
	$o->body_format = NULL;
	$o->bid = NULL;

	return $o;
}

function asidebox_node_view($node, $view_mode, $langcode) {
	$asidebox = asidebox_load_asidebox($node->vid);
	if ($asidebox != NULL) {
		if ($asidebox->status == 'html') {
			$node->content['asidebox_main'] = array(
				'#theme' => 'asidebox',
				'#body' => $asidebox->body_value,
				// '#body' => t("Let's do this, baby!!!"),
				'#weight' => -1,	// make sure it's at the top of the rendering order
			);
		} elseif ($asidebox->status == 'block') {
			// thanks to this tip at:
			// http://www.computerminds.co.uk/drupal-code/render-block-programmatically
			// http://drupal.org/node/957038#comment-4856536
			$block = block_load($asidebox->block_module, $asidebox->block_delta);
			$render_array = _block_get_renderable_array(_block_render_blocks(array($block)));
			dpm($render_array);
			$node->content['asidebox_main'] = array(
				'#theme' => 'asidebox',
				'#body' => render($render_array),
				'#weight' => -1,
			);

			// $block = block_load($module, $delta);
			// $render_array
		}
	}
}
